<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'doctrine.orm.default_entity_manager' shared service.

include_once $this->targetDirs[3].'\\vendor\\doctrine\\persistence\\lib\\Doctrine\\Common\\Persistence\\ObjectManager.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\EntityManagerInterface.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\EntityManager.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\dbal\\lib\\Doctrine\\DBAL\\Configuration.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Configuration.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\persistence\\lib\\Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriver.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\persistence\\lib\\Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\persistence\\lib\\Doctrine\\Common\\Persistence\\Mapping\\Driver\\AnnotationDriver.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Mapping\\Driver\\AnnotationDriver.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Mapping\\NamingStrategy.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Mapping\\QuoteStrategy.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Mapping\\DefaultQuoteStrategy.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Mapping\\EntityListenerResolver.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\doctrine-bundle\\Mapping\\EntityListenerServiceResolver.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\doctrine-bundle\\Mapping\\ContainerAwareEntityListenerResolver.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Repository\\RepositoryFactory.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\doctrine-bundle\\Repository\\ContainerRepositoryFactory.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\doctrine-bundle\\ManagerConfigurator.php';

$a = new \Doctrine\ORM\Configuration();

$b = new \Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain();

$c = new \Doctrine\ORM\Mapping\Driver\AnnotationDriver(($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService()), [0 => ($this->targetDirs[3].'\\src\\Entity'), 1 => ($this->targetDirs[3].'\\vendor\\vich\\uploader-bundle\\Entity'), 2 => ($this->targetDirs[3].'\\vendor\\tattali\\calendar-bundle\\src\\Entity')]);

$b->addDriver($c, 'App\\Entity');
$b->addDriver($c, 'Vich\\UploaderBundle\\Entity');
$b->addDriver($c, 'CalendarBundle\\Entity');

$a->setEntityNamespaces(['App' => 'App\\Entity', 'VichUploaderBundle' => 'Vich\\UploaderBundle\\Entity', 'CalendarBundle' => 'CalendarBundle\\Entity']);
$a->setMetadataCacheImpl(($this->services['doctrine_cache.providers.doctrine.orm.default_metadata_cache'] ?? $this->load('getDoctrineCache_Providers_Doctrine_Orm_DefaultMetadataCacheService.php')));
$a->setQueryCacheImpl(($this->services['doctrine_cache.providers.doctrine.orm.default_query_cache'] ?? $this->load('getDoctrineCache_Providers_Doctrine_Orm_DefaultQueryCacheService.php')));
$a->setResultCacheImpl(($this->services['doctrine_cache.providers.doctrine.orm.default_result_cache'] ?? $this->load('getDoctrineCache_Providers_Doctrine_Orm_DefaultResultCacheService.php')));
$a->setMetadataDriverImpl($b);
$a->setProxyDir(($this->targetDirs[0].'/doctrine/orm/Proxies'));
$a->setProxyNamespace('Proxies');
$a->setAutoGenerateProxyClasses(true);
$a->setClassMetadataFactoryName('Doctrine\\ORM\\Mapping\\ClassMetadataFactory');
$a->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
$a->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy());
$a->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
$a->setEntityListenerResolver(new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver($this));
$a->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
    'App\\Repository\\AdressRepository' => ['privates', 'App\\Repository\\AdressRepository', 'getAdressRepositoryService.php', true],
    'App\\Repository\\ArticleRepository' => ['privates', 'App\\Repository\\ArticleRepository', 'getArticleRepositoryService.php', true],
    'App\\Repository\\AttachedFileRepository' => ['privates', 'App\\Repository\\AttachedFileRepository', 'getAttachedFileRepositoryService.php', true],
    'App\\Repository\\CategoryRepository' => ['privates', 'App\\Repository\\CategoryRepository', 'getCategoryRepositoryService.php', true],
    'App\\Repository\\CityRepository' => ['privates', 'App\\Repository\\CityRepository', 'getCityRepositoryService.php', true],
    'App\\Repository\\CommentRepository' => ['privates', 'App\\Repository\\CommentRepository', 'getCommentRepositoryService.php', true],
    'App\\Repository\\ContactClubRepository' => ['privates', 'App\\Repository\\ContactClubRepository', 'getContactClubRepositoryService.php', true],
    'App\\Repository\\ContactListRepository' => ['privates', 'App\\Repository\\ContactListRepository', 'getContactListRepositoryService.php', true],
    'App\\Repository\\ContentPageRepository' => ['privates', 'App\\Repository\\ContentPageRepository', 'getContentPageRepositoryService.php', true],
    'App\\Repository\\CountryRepository' => ['privates', 'App\\Repository\\CountryRepository', 'getCountryRepositoryService.php', true],
    'App\\Repository\\EncadrementRepository' => ['privates', 'App\\Repository\\EncadrementRepository', 'getEncadrementRepositoryService.php', true],
    'App\\Repository\\GalleryRepository' => ['privates', 'App\\Repository\\GalleryRepository', 'getGalleryRepositoryService.php', true],
    'App\\Repository\\HistoryRepository' => ['privates', 'App\\Repository\\HistoryRepository', 'getHistoryRepositoryService.php', true],
    'App\\Repository\\MediaRepository' => ['privates', 'App\\Repository\\MediaRepository', 'getMediaRepositoryService.php', true],
    'App\\Repository\\NotificationRepository' => ['privates', 'App\\Repository\\NotificationRepository', 'getNotificationRepositoryService.php', true],
    'App\\Repository\\PaiementRepository' => ['privates', 'App\\Repository\\PaiementRepository', 'getPaiementRepositoryService.php', true],
    'App\\Repository\\PersonOfContactRepository' => ['privates', 'App\\Repository\\PersonOfContactRepository', 'getPersonOfContactRepositoryService.php', true],
    'App\\Repository\\PhoneRepository' => ['privates', 'App\\Repository\\PhoneRepository', 'getPhoneRepositoryService.php', true],
    'App\\Repository\\PriceGridRepository' => ['privates', 'App\\Repository\\PriceGridRepository', 'getPriceGridRepositoryService.php', true],
    'App\\Repository\\RegistrationRepository' => ['privates', 'App\\Repository\\RegistrationRepository', 'getRegistrationRepositoryService.php', true],
    'App\\Repository\\SponsorRepository' => ['privates', 'App\\Repository\\SponsorRepository', 'getSponsorRepositoryService.php', true],
    'App\\Repository\\UserConnectedRepository' => ['privates', 'App\\Repository\\UserConnectedRepository', 'getUserConnectedRepositoryService.php', true],
    'App\\Repository\\UserRepository' => ['privates', 'App\\Repository\\UserRepository', 'getUserRepositoryService.php', true],
    'App\\Repository\\UserTypeRepository' => ['privates', 'App\\Repository\\UserTypeRepository', 'getUserTypeRepositoryService.php', true],
    'App\\Repository\\VikaEventRepository' => ['privates', 'App\\Repository\\VikaEventRepository', 'getVikaEventRepositoryService.php', true],
])));

$this->services['doctrine.orm.default_entity_manager'] = $instance = \Doctrine\ORM\EntityManager::create(($this->services['doctrine.dbal.default_connection'] ?? $this->load('getDoctrine_Dbal_DefaultConnectionService.php')), $a);

(new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

return $instance;
