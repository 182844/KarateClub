<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Registration extends \App\Entity\Registration implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'registrationDate', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'remark', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'user', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'vikaEvent', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'minor', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'medical_care', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'image_diffusion', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'condition_registration', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'total_amount', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'paiement', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'attachedFiles', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'validateRegistration_date', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'isValidated'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'registrationDate', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'remark', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'user', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'vikaEvent', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'minor', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'medical_care', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'image_diffusion', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'condition_registration', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'total_amount', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'paiement', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'attachedFiles', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'validateRegistration_date', '' . "\0" . 'App\\Entity\\Registration' . "\0" . 'isValidated'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Registration $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getRegistrationDate(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRegistrationDate', []);

        return parent::getRegistrationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setRegistrationDate(\DateTimeInterface $registrationDate): \App\Entity\Registration
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRegistrationDate', [$registrationDate]);

        return parent::setRegistrationDate($registrationDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getRemark(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRemark', []);

        return parent::getRemark();
    }

    /**
     * {@inheritDoc}
     */
    public function setRemark(?string $remark): \App\Entity\Registration
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRemark', [$remark]);

        return parent::setRemark($remark);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser(): ?\App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(?\App\Entity\User $user): \App\Entity\Registration
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getVikaEvent(): ?\App\Entity\VikaEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVikaEvent', []);

        return parent::getVikaEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setVikaEvent(?\App\Entity\VikaEvent $vikaEvent): \App\Entity\Registration
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVikaEvent', [$vikaEvent]);

        return parent::setVikaEvent($vikaEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getMinor(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMinor', []);

        return parent::getMinor();
    }

    /**
     * {@inheritDoc}
     */
    public function setMinor(?bool $minor): \App\Entity\Registration
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMinor', [$minor]);

        return parent::setMinor($minor);
    }

    /**
     * {@inheritDoc}
     */
    public function getMedicalCare(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMedicalCare', []);

        return parent::getMedicalCare();
    }

    /**
     * {@inheritDoc}
     */
    public function setMedicalCare(?bool $medical_care): \App\Entity\Registration
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMedicalCare', [$medical_care]);

        return parent::setMedicalCare($medical_care);
    }

    /**
     * {@inheritDoc}
     */
    public function getImageDiffusion(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImageDiffusion', []);

        return parent::getImageDiffusion();
    }

    /**
     * {@inheritDoc}
     */
    public function setImageDiffusion(?bool $image_diffusion): \App\Entity\Registration
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImageDiffusion', [$image_diffusion]);

        return parent::setImageDiffusion($image_diffusion);
    }

    /**
     * {@inheritDoc}
     */
    public function getConditionRegistration(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConditionRegistration', []);

        return parent::getConditionRegistration();
    }

    /**
     * {@inheritDoc}
     */
    public function setConditionRegistration(bool $condition_registration): \App\Entity\Registration
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConditionRegistration', [$condition_registration]);

        return parent::setConditionRegistration($condition_registration);
    }

    /**
     * {@inheritDoc}
     */
    public function getTotalAmount(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTotalAmount', []);

        return parent::getTotalAmount();
    }

    /**
     * {@inheritDoc}
     */
    public function setTotalAmount(?float $total_amount): \App\Entity\Registration
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTotalAmount', [$total_amount]);

        return parent::setTotalAmount($total_amount);
    }

    /**
     * {@inheritDoc}
     */
    public function getPaiement(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPaiement', []);

        return parent::getPaiement();
    }

    /**
     * {@inheritDoc}
     */
    public function addPaiement(\App\Entity\Paiement $paiement): \App\Entity\Registration
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPaiement', [$paiement]);

        return parent::addPaiement($paiement);
    }

    /**
     * {@inheritDoc}
     */
    public function removePaiement(\App\Entity\Paiement $paiement): \App\Entity\Registration
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePaiement', [$paiement]);

        return parent::removePaiement($paiement);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttachedFiles(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttachedFiles', []);

        return parent::getAttachedFiles();
    }

    /**
     * {@inheritDoc}
     */
    public function addAttachedFile(\App\Entity\AttachedFile $attachedFile): \App\Entity\Registration
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAttachedFile', [$attachedFile]);

        return parent::addAttachedFile($attachedFile);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAttachedFile(\App\Entity\AttachedFile $attachedFile): \App\Entity\Registration
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAttachedFile', [$attachedFile]);

        return parent::removeAttachedFile($attachedFile);
    }

    /**
     * {@inheritDoc}
     */
    public function getValidateRegistrationDate(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValidateRegistrationDate', []);

        return parent::getValidateRegistrationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setValidateRegistrationDate(?\DateTimeInterface $validateRegistration_date): \App\Entity\Registration
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setValidateRegistrationDate', [$validateRegistration_date]);

        return parent::setValidateRegistrationDate($validateRegistration_date);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsValidated(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsValidated', []);

        return parent::getIsValidated();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsValidated(?bool $isValidated): \App\Entity\Registration
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsValidated', [$isValidated]);

        return parent::setIsValidated($isValidated);
    }

}
