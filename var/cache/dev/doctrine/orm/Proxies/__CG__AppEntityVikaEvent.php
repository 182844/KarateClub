<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class VikaEvent extends \App\Entity\VikaEvent implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'id', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'owner', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'title', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'capacity', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'createdEv', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'category', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'registrations', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'imageFile', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'imageName', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'updatedImage', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'startDate', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'endDate', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'priceGrid', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'info', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'published', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'inscription', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'easyInscription'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'id', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'owner', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'title', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'capacity', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'createdEv', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'category', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'registrations', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'imageFile', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'imageName', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'updatedImage', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'startDate', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'endDate', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'priceGrid', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'info', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'published', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'inscription', '' . "\0" . 'App\\Entity\\VikaEvent' . "\0" . 'easyInscription'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (VikaEvent $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setImageFile(\Symfony\Component\HttpFoundation\File\File $imageFile = NULL): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImageFile', [$imageFile]);

        parent::setImageFile($imageFile);
    }

    /**
     * {@inheritDoc}
     */
    public function getImageFile(): ?\Symfony\Component\HttpFoundation\File\File
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImageFile', []);

        return parent::getImageFile();
    }

    /**
     * {@inheritDoc}
     */
    public function setImageName(?string $imageName): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImageName', [$imageName]);

        parent::setImageName($imageName);
    }

    /**
     * {@inheritDoc}
     */
    public function getImageName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImageName', []);

        return parent::getImageName();
    }

    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getOwner(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOwner', []);

        return parent::getOwner();
    }

    /**
     * {@inheritDoc}
     */
    public function setOwner(?string $owner): \App\Entity\VikaEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOwner', [$owner]);

        return parent::setOwner($owner);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle(string $title): \App\Entity\VikaEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getCapacity(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCapacity', []);

        return parent::getCapacity();
    }

    /**
     * {@inheritDoc}
     */
    public function setCapacity(?int $capacity): \App\Entity\VikaEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCapacity', [$capacity]);

        return parent::setCapacity($capacity);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedEv(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedEv', []);

        return parent::getCreatedEv();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedEv(\DateTimeInterface $createdEv): \App\Entity\VikaEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedEv', [$createdEv]);

        return parent::setCreatedEv($createdEv);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory(): ?\App\Entity\Category
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', []);

        return parent::getCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategory(?\App\Entity\Category $category): \App\Entity\VikaEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategory', [$category]);

        return parent::setCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getRegistrations(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRegistrations', []);

        return parent::getRegistrations();
    }

    /**
     * {@inheritDoc}
     */
    public function addRegistration(\App\Entity\Registration $registration): \App\Entity\VikaEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRegistration', [$registration]);

        return parent::addRegistration($registration);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRegistration(\App\Entity\Registration $registration): \App\Entity\VikaEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRegistration', [$registration]);

        return parent::removeRegistration($registration);
    }

    /**
     * {@inheritDoc}
     */
    public function getStartDate(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartDate', []);

        return parent::getStartDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setStartDate(\DateTimeInterface $startDate): \App\Entity\VikaEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStartDate', [$startDate]);

        return parent::setStartDate($startDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getEndDate(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndDate', []);

        return parent::getEndDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setEndDate(?\DateTimeInterface $endDate): \App\Entity\VikaEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndDate', [$endDate]);

        return parent::setEndDate($endDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getPriceGrid(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPriceGrid', []);

        return parent::getPriceGrid();
    }

    /**
     * {@inheritDoc}
     */
    public function addPriceGrid(\App\Entity\PriceGrid $priceGrid): \App\Entity\VikaEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPriceGrid', [$priceGrid]);

        return parent::addPriceGrid($priceGrid);
    }

    /**
     * {@inheritDoc}
     */
    public function removePriceGrid(\App\Entity\PriceGrid $priceGrid): \App\Entity\VikaEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePriceGrid', [$priceGrid]);

        return parent::removePriceGrid($priceGrid);
    }

    /**
     * {@inheritDoc}
     */
    public function getInfo(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInfo', []);

        return parent::getInfo();
    }

    /**
     * {@inheritDoc}
     */
    public function setInfo(?string $info): \App\Entity\VikaEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInfo', [$info]);

        return parent::setInfo($info);
    }

    /**
     * {@inheritDoc}
     */
    public function getPublished(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublished', []);

        return parent::getPublished();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublished(?bool $published): \App\Entity\VikaEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublished', [$published]);

        return parent::setPublished($published);
    }

    /**
     * {@inheritDoc}
     */
    public function getInscription(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInscription', []);

        return parent::getInscription();
    }

    /**
     * {@inheritDoc}
     */
    public function setInscription(?bool $inscription): \App\Entity\VikaEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInscription', [$inscription]);

        return parent::setInscription($inscription);
    }

    /**
     * {@inheritDoc}
     */
    public function getEasyInscription(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEasyInscription', []);

        return parent::getEasyInscription();
    }

    /**
     * {@inheritDoc}
     */
    public function setEasyInscription(?bool $easyInscription): \App\Entity\VikaEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEasyInscription', [$easyInscription]);

        return parent::setEasyInscription($easyInscription);
    }

}
